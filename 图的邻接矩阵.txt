# include <cstdio>
#include <queue>
using namespace std;
#define FFINITY 5000   //代表无穷大
# define M 20
queue <int >q;
typedef char vertextype;//顶点值类型
typedef int edgetyoe;//权值类型
typedef struct {
	vertextype vexs[M];//顶点信息域
	edgetyoe edges[M][M];//邻接矩阵
	int n, e;//图中顶点总数与边数
}Mgraph;
bool visit[M];//访问标记的数组
//c 为 0表示建立无向图，否则表示建立有向图
//从文件中读取信息
void create(Mgraph *g,  int c)
{
	int i, j, k, w;
	FILE *rf;
	rf = fopen("D:test.txt", "r");//从文件中读取图的信息
	if (rf)
	{
		fscanf(rf, "%d%d", &g->n, &g->e);//读入图的顶点值与边数
		for (int i = 0; i < g->n; i++)
			fscanf(rf, "%1s", &g->vexs[i]); //读入图的顶点值
		//初始化邻接矩阵
		for (int i = 0; i < g->n; i++)
		{
			for (int j = 0; j < g->n; j++)
			{
				if (i == j)
					g->edges[i][j] = 0;
				else
					g->edges[i][j] = FFINITY;
			}
		}
		//读入网络中的边
		for (int k = 0; k < g->e; k++)
		{
			fscanf(rf, "%d%d%d", &i, &j, &w);
			g->edges[i][j] = w;
			if (c == 0)
				g->edges[j][i] = w;//建立无向图邻接juzhen
		}
		fclose(rf);
	}
	else
		g->n = 0;
}
//键盘键入文件信息
void create1(Mgraph *h, int c)
{
	int i, j,w;
	scanf("%d%d", &h->n, &h->e);
	for (int i = 0; i < h->n; i++)
		scanf("%c", &h->vexs[i]);
	//初始化邻接juzhzen
	for ( i = 0; i < h->n; i++)
	{
		for (j = 0; j < h->n; j++)
		{
			if (i == j) { h->edges[i][j] = 0; }
			else
				h->edges[i][j] = FFINITY;
		}
	}
	for (int k = 0; k < h->e; k++)
	{
		scanf("%d%d%d", &i, &j, &w);
		h->edges[i][j] = w;
		if (c == 0)
			h->edges[i][j] = w;
	}
}
//邻接矩阵dfs遍历
void dfs(Mgraph g, int i)
{
	int j;
	visit[i] = true;
	printf("%c", g.vexs[i]);
	for (j = 0; j < g.n; j++)
	{
		if (g.edges[i][j]  <FFINITY && !visit[i])
		{
			dfs(g, j);
		}
	}
}
void dfsmgraph(Mgraph g)
{
	int i;
	for (int i = 0; i < g.n; i++)
		visit[i] = false;
	for (int i = 0; i < g.n; i++)
	{
		if (!visit[i])
		{
			dfs(g, i);//若是连通图，只调用一次
		}
	}
}
void bfs(Mgraph g,int i)
{
	q.push(i);
	visit[i] = true;
	while (!q.empty())
	{
		int t = q.front();
		q.pop();
		printf("%c",g.vexs[i]);
		for (int j = 0; j < g.n; j++)
		{
			if (g.edges[i][j] < FFINITY  && visit[i] == false)
			{
				q.push(j);
				visit[j] = true;
			}
		}
	}

}
void bfsmgraph(Mgraph g)
{
	int i;
	for (int i = 0; i < g.n; i++)
	{
		visit[i] = false;
	}
	for (int i = 0; i < g.n; i++)
	{
		if (!visit[i])
		{
			bfs(g, i);//若是连通图，只调用一次
		}
	}
}



